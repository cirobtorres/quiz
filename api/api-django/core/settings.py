"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/

# Deployment checklist
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
"""

import os
import cloudinary
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'
BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.getenv('SECRET_KEY')
DEBUG = os.getenv('DEBUG') == 'True'
# QUIZ_MODERATION is a tool for moderators to control user-generated content on the website 
# It allow administrators to moderate inappropriate content submitted by users 
# If quiz.blocked == True, that quiz cannot be visualized by other users 
# This attribute usage can be found on quiz models.py and its set as True by default for production 
# This means that every quiz submited to the database must be moderated before it is public 
QUIZ_MODERATION = DEBUG == False
DATA_DIR = BASE_DIR.parent.parent / 'data' / 'web' if not DEBUG else BASE_DIR.parent.parent / 'web' / 'public' 
ALLOWED_HOSTS = [h.strip() for h in os.getenv('ALLOWED_HOSTS', '').split(',') if h.strip()]
AUTH_USER_MODEL = 'user.UserModel'

cloudinary.config(
    cloud_name=os.getenv('CLOUDINARY_NAME'), 
    api_key=os.getenv('CLOUDINARY_API_KEY'), 
    api_secret=os.getenv('CLOUDINARY_API_SECRET'), 
    secure=os.getenv('DEBUG') == 'True'
)

INSTALLED_APPS = [
    'django.contrib.admin', 
    'django.contrib.auth', 
    'django.contrib.contenttypes', 
    'django.contrib.sessions', 
    'django.contrib.messages', 
    'django.contrib.staticfiles', 
    'cloudinary', 
    'corsheaders', 
    'rest_framework', 
    'rest_framework_simplejwt', 
    'rest_framework_simplejwt.token_blacklist', 
    'apps.user', 
    'apps.media_app', 
    'apps.quiz', 
    'apps.score', 
] 

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://127.0.0.1:8000',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'authorization',
    'content-type',
    'enctype',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-www-form-urlencoded',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('ACCESS_TOKEN_LIFETIME_MIN')) or 60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.getenv('REFRESH_TOKEN_LIFETIME_DAYS')) or 7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# https://docs.djangoproject.com/en/5.0/ref/settings/#databases 

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'quizdatabase',
    }
    # 'default': {
    #     'ENGINE': os.getenv('DB_ENGINE', 'CHANGE-ME'),
    #     'NAME': os.getenv('POSTGRES_DB', 'CHANGE-ME'),
    #     'USER': os.getenv('POSTGRES_USER', 'postgres'),
    #     'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'CHANGE-ME'),
    #     'HOST': os.getenv('POSTGRES_HOST', 'CHANGE-ME'), # Change-me to localhost if running directly through the prompt
    #     'PORT': os.getenv('POSTGRES_PORT', 5432)
    # }
}

# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization 
# https://docs.djangoproject.com/en/5.0/topics/i18n/ 

LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images) 
# https://docs.djangoproject.com/en/5.0/howto/static-files/ 

MEDIA_ROOT = os.path.join(DATA_DIR, 'static', 'media') if not DEBUG else DATA_DIR # Path where django ImageField saves 
MEDIA_URL = 'media/' if not DEBUG else 'images/' # URL path where django ImageField points towards to 

STATIC_ROOT = os.path.join(DATA_DIR, 'static')
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field 

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

